#!/usr/bin/env node

const fs = require('fs');
const css = require('csso').minify;
const babel = require('@babel/core');
const html = require('html-minifier').minify;
const walk = require('ignore-walk');
const minimist = require('minimist');
const { name, version } = require('../package.json');

const dirWithSlash = d => !d || d.endsWith('/') ? d : d + '/';

const args = minimist(process.argv.slice(2));

if (args['h'] || args['H'] || args['help']) {
    console.log(`usage: siwedt [options] [input-dir]

options:
    -c[file], --config=[file]
        Specify the config file, defaults to [input-dir]/.siwedtrc
    -C[config], --inline-config=[config]
        Specify the configuration (overrides the config file)
    -V, --verbose
        Print all processed files
    -v, --version
        Display version information
    -h, -H, --help
        Display this help message`);
    process.exit(0);
}

if (args['v'] || args['version']) {
    console.log(name + ' ' + version);
    process.exit(0);
}

const indir = dirWithSlash(args['_'][0]) ?? '';

if ((args['C'] || args['inline-config']) && (args['c'] || args['config'])) {
    console.error('-c/--config and -C/--inline-config are mutually exclusive');
    process.exit(1);
}

let configfile = args['c'] ?? args['config'];
if (configfile && !fs.existsSync(configfile)) {
    console.error(`config file not found: ${configfile}`);
    process.exit(1);
}
if (!configfile && fs.existsSync(indir + '.siwedtrc')) configfile = indir + '.siwedtrc';

const rc = JSON.parse(args['C'] ?? args['inline-config']
    ?? (configfile ? fs.readFileSync(configfile) : '{}'));

const browserlist = rc['browserlist'] ?? '';
const outdir = dirWithSlash(rc['outdir'] ?? 'dist');

const babelJs = {
    'presets': [
        [require('@babel/preset-env'), { targets: browserlist }],
        [require('babel-preset-minify')],
    ],
};
const babelTs = {
    'presets': [
        [require('@babel/preset-typescript')],
        [require('@babel/preset-env'), { targets: browserlist }],
        [require('babel-preset-minify')],
    ],
};
const htmlConfig = {
    collapseBooleanAttributes: true,
    collapseInlineTagWhitespace: true,
    collapseWhitespace: true,
    decodeEntities: true,
    minifyCSS: true,
    minifyJS: true,
    minifyURLs: true,
    removeAttributeQuotes: true,
    removeComments: true,
    removeEmptyAttributes: true,
    removeOptionalTags: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    useShortDoctype: true
};
function minifyFile(f) {
    const i = indir + f;
    const o = outdir + f;
    if (f.endsWith('.js')) {
        return ['babel', o, babel.transformFileSync(i, babelJs).code];
    } else if (f.endsWith('.ts')) {
        return ['babel', o.replace(/\.ts$/, '.js'), babel.transformFileSync(i, babelTs).code];
    } else if (f.endsWith('.css')) {
        return ['csso', o, css(fs.readFileSync(i, { encoding: 'utf-8' })).css];
    } else if (f.endsWith('.html') || f.endsWith('.htm')) {
        return ['html-minifier', o, html(fs.readFileSync(i, { encoding: 'utf-8' }), htmlConfig)];
    } else {
        return ['copy', o];
    }
}

if (fs.existsSync(outdir)) fs.rmSync(outdir, { recursive: true, force: true });

const verbose = args['V'] || args['verbose'];

// .siwedtignore shouldn't exist, blame @isaacs: npm/ignore-walk#12
const files = walk.sync({ path: indir, ignoreFiles: ['.gitignore', '.siwedtignore'] });
for (const f of files) {
    const [t, o, c] = minifyFile(f);
    const od = o.split('/').slice(0, -1).reduce((x, y) => x + '/' + y);
    if (!fs.existsSync(od)) fs.mkdirSync(od, { recursive: true });
    if (verbose) console.log(`${t.padEnd(13, ' ')} ${f}`);
    if (c) {
        fs.writeFileSync(o, c);
    } else {
        fs.copyFileSync(f, o);
    }
}
